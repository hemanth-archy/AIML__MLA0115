import heapq
import itertools

# Define the goal state
GOAL_STATE = ((1, 2, 3), (4, 5, 6), (7, 8, 0))

# Define possible moves
MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

def manhattan_distance(state):
    """Compute the Manhattan distance heuristic."""
    distance = 0
    for r in range(3):
        for c in range(3):
            value = state[r][c]
            if value != 0:
                goal_r, goal_c = divmod(value - 1, 3)
                distance += abs(goal_r - r) + abs(goal_c - c)
    return distance

def get_neighbors(state):
    """Generate valid neighbor states by moving the empty tile."""
    empty_tile = [(r, c) for r in range(3) for c in range(3) if state[r][c] == 0][0]
    r, c = empty_tile
    neighbors = []
    
    for dr, dc in MOVES:
        new_r, new_c = r + dr, c + dc
        if 0 <= new_r < 3 and 0 <= new_c < 3:
            new_state = [list(row) for row in state]
            new_state[r][c], new_state[new_r][new_c] = new_state[new_r][new_c], new_state[r][c]
            neighbors.append(tuple(tuple(row) for row in new_state))
    
    return neighbors

def a_star(start_state):
    """Solve the 8-Puzzle problem using A* search."""
    if start_state == GOAL_STATE:
        return []

    open_list = []
    heapq.heappush(open_list, (0 + manhattan_distance(start_state), 0, start_state, []))
    closed_set = set()
    
    while open_list:
        _, cost, state, path = heapq.heappop(open_list)
        
        if state in closed_set:
            continue
        closed_set.add(state)

        for neighbor in get_neighbors(state):
            if neighbor == GOAL_STATE:
                return path + [state, neighbor]
            
            if neighbor not in closed_set:
                new_cost = cost + 1
                heuristic = manhattan_distance(neighbor)
                heapq.heappush(open_list, (new_cost + heuristic, new_cost, neighbor, path + [state]))

    return None

def print_puzzle(state):
    """Print the puzzle in a readable format."""
    for row in state:
        print(' '.join(f'{num:2}' if num != 0 else '  ' for num in row))
    print()

if __name__ == "__main__":
    initial_state = ((1, 2, 3), (4, 5, 6), (7, 0, 8))  # Example initial state
    print("Initial State:")
    print_puzzle(initial_state)
    
    solution = a_star(initial_state)
    
    if solution:
        print("Solution Path:")
        for step in solution:
            print_puzzle(step)
    else:
        print("No solution found.")
